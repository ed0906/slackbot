{
  "swagger": "2.0",
  "info": {
    "version": "2018-04-11T09:06:39Z",
    "title": "slackbot"
  },
  "host": "{{api-id}}.execute-api.eu-west-2.amazonaws.com",
  "basePath": "/prod",
  "schemes": [
    "https"
  ],
  "paths": {
    "/random-reviewer": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:{{region}}:lambda:path/2015-03-31/functions/arn:aws:lambda:{{region}}:{{lambda-id}}:function:${stageVariables.lambda}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_templates",
          "httpMethod": "POST",
          "requestTemplates": {
            "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"text\" : $input.json('$.text'),\n\"channel_id\" : $input.json('$.channel_id'),\n\"user_id\" : $input.json('$.user_id'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n",
            "application/x-www-form-urlencoded": "## convert HTML POST data or HTTP GET query string to JSON\r\n \r\n## get the raw post data from the AWS built-in variable and give it a nicer name\r\n#if ($context.httpMethod == \"POST\")\r\n #set($rawAPIData = $input.path(\"$\"))\r\n#elseif ($context.httpMethod == \"GET\")\r\n #set($rawAPIData = $input.params().querystring)\r\n #set($rawAPIData = $rawAPIData.toString())\r\n #set($rawAPIDataLength = $rawAPIData.length() - 1)\r\n #set($rawAPIData = $rawAPIData.substring(1, $rawAPIDataLength))\r\n #set($rawAPIData = $rawAPIData.replace(\", \", \"&\"))\r\n#else\r\n #set($rawAPIData = \"\")\r\n#end\r\n \r\n## first we get the number of \"&\" in the string, this tells us if there is more than one key value pair\r\n#set($countAmpersands = $rawAPIData.length() - $rawAPIData.replace(\"&\", \"\").length())\r\n \r\n## if there are no \"&\" at all then we have only one key value pair.\r\n## we append an ampersand to the string so that we can tokenise it the same way as multiple kv pairs.\r\n## the \"empty\" kv pair to the right of the ampersand will be ignored anyway.\r\n#if ($countAmpersands == 0)\r\n #set($rawPostData = $rawAPIData + \"&\")\r\n#end\r\n \r\n## now we tokenise using the ampersand(s)\r\n#set($tokenisedAmpersand = $rawAPIData.split(\"&\"))\r\n \r\n## we set up a variable to hold the valid key value pairs\r\n#set($tokenisedEquals = [])\r\n \r\n## now we set up a loop to find the valid key value pairs, which must contain only one \"=\"\r\n#foreach( $kvPair in $tokenisedAmpersand )\r\n #set($countEquals = $kvPair.length() - $kvPair.replace(\"=\", \"\").length())\r\n #if ($countEquals == 1)\r\n  #set($kvTokenised = $kvPair.split(\"=\"))\r\n  #if ($kvTokenised[0].length() > 0)\r\n   ## we found a valid key value pair. add it to the list.\r\n   #set($devNull = $tokenisedEquals.add($kvPair))\r\n  #end\r\n #end\r\n#end\r\n \r\n## next we set up our loop inside the output structure \"{\" and \"}\"\r\n{\r\n#foreach( $kvPair in $tokenisedEquals )\r\n  ## finally we output the JSON for this pair and append a comma if this isn't the last pair\r\n  #set($kvTokenised = $kvPair.split(\"=\"))\r\n \"$util.urlDecode($kvTokenised[0])\" : #if($kvTokenised[1].length() > 0)\"$util.urlDecode($kvTokenised[1])\"#{else}\"\"#end#if( $foreach.hasNext ),#end\r\n#end\r\n}"
          },
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws"
        }
      }
    }
  },
  "definitions": {
    "Empty": {
      "type": "object",
      "title": "Empty Schema"
    }
  }
}